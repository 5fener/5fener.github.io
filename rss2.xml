<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>长安街</title>
    <link>https://5fener.github.io/</link>
    
    <atom:link href="https://5fener.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>举目见日，不见长安</description>
    <pubDate>Tue, 21 Feb 2023 12:36:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>顺序表和链表的比较</title>
      <link>https://5fener.github.io/2023/02/21/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <guid>https://5fener.github.io/2023/02/21/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <pubDate>Tue, 21 Feb 2023 08:38:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;顺序表（顺序存储)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优点：支持随机存取、存储密度高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点：大片连续空间分配不方便，改变容量不方便&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表（链式存储）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：离散的小空间分配方便，</description>
        
      
      
      
      <content:encoded><![CDATA[<p>顺序表（顺序存储)</p><ul><li><p>优点：支持随机存取、存储密度高</p></li><li><p>缺点：大片连续空间分配不方便，改变容量不方便</p></li></ul><p>链表（链式存储）</p><ul><li>优点：离散的小空间分配方便，改变容量方便</li><li>缺点：不可随机存取，存储密度低</li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>静态链表</title>
      <link>https://5fener.github.io/2023/02/21/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/</link>
      <guid>https://5fener.github.io/2023/02/21/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Tue, 21 Feb 2023 08:37:42 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;静态链表：分配一整片连续的内存空间，各个结点集中安置&lt;/p&gt;
&lt;p&gt;优点：增删操作不需要大量移动元素&lt;/p&gt;
&lt;p&gt;缺点：不能随机存取，只能从头结点开始依次往后查找；&lt;strong&gt;容量固定不可变&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<p>静态链表：分配一整片连续的内存空间，各个结点集中安置</p><p>优点：增删操作不需要大量移动元素</p><p>缺点：不能随机存取，只能从头结点开始依次往后查找；<strong>容量固定不可变</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//静态链表的最大长度</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;<span class="comment">//静态链表结构类型的定义</span></span><br><span class="line">    ElemType data;<span class="comment">//存储数据元素</span></span><br><span class="line">    <span class="type">int</span> next;<span class="comment">//下一个元素的数组下标</span></span><br><span class="line">&#125;SLinkList[MaxSize];</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">typedef struct Node SLinkList[MaxSize];</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><ul><li><p>查找：从头结点出发挨个往后遍历结点</p></li><li><p>插入位序为 i 的结点：</p><ul><li>找到一个空的结点，存入数据元素</li><li>从头结点出发找到位序为 i-1 的结点</li><li>修改新结点的 next</li><li>修改 i-1 号结点的 next</li></ul></li><li><p>删除某个结点</p><ul><li>从头结点出发找到前驱结点</li><li>修改前驱结点的游标</li><li>被删除结点next设为-2（用一个特殊的数值标记空闲结点）</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循环链表</title>
      <link>https://5fener.github.io/2023/02/21/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <guid>https://5fener.github.io/2023/02/21/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Tue, 21 Feb 2023 08:37:21 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;循环单链表&quot;&gt;&lt;a href=&quot;#循环单链表&quot; class=&quot;headerlink&quot; title=&quot;循环单链表&quot;&gt;&lt;/a&gt;循环单链表&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;<span class="comment">//定义单链表结点类型</span></span><br><span class="line">    ElemType data;<span class="comment">//每个结点存放一个数据类型</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;<span class="comment">//指针指向下一个结点</span></span><br><span class="line">&#125;LNode, *LNodeList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个循环单链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = L;<span class="comment">//头结点next指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断循环单链表是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断结点p是否为循环单链表的表尾结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(LinkList L, LNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior, *next;</span><br><span class="line">&#125;DNode, *DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化空的循环双链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L =(DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;prior = L;<span class="comment">//头结点的 prior 指向头结点</span></span><br><span class="line">    L-&gt;next = L;<span class="comment">//头结点的 next 指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断循环双链表是否为空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断结点p是否为循环双链表的表尾结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTail</span><span class="params">(DLinkList L, DNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在p结点之后插入s结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p, DNode *s)</span></span>&#123;</span><br><span class="line">    s-&gt;next = p-&gt;next;<span class="comment">//将结点*s插入到结点*p之后</span></span><br><span class="line">    p-&gt;next-&gt;prior = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除p的后继结点q</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>双链表</title>
      <link>https://5fener.github.io/2023/02/21/%E5%8F%8C%E9%93%BE%E8%A1%A8/</link>
      <guid>https://5fener.github.io/2023/02/21/%E5%8F%8C%E9%93%BE%E8%A1%A8/</guid>
      <pubDate>Tue, 21 Feb 2023 08:08:50 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;双链表的初始化（带头结点）&quot;&gt;&lt;a href=&quot;#双链表的初始化（带头结点）&quot; class=&quot;headerlink&quot; title=&quot;双链表的初始化（带头结点）&quot;&gt;&lt;/a&gt;双链表的初始化（带头结点）&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="双链表的初始化（带头结点）"><a href="#双链表的初始化（带头结点）" class="headerlink" title="双链表的初始化（带头结点）"></a>双链表的初始化（带头结点）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span>&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior, *next;</span><br><span class="line">&#125;DNode, *DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化双链表</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (DNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;prior == <span class="literal">NULL</span>;<span class="comment">//头结点的 prior 永远指向 NULL</span></span><br><span class="line">    L-&gt;next == <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断双链表是否为空（带头结点）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testDLinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化双链表</span></span><br><span class="line">    DLinkList L;</span><br><span class="line">    <span class="built_in">InitDLinkList</span>(L);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在p结点之后插入s结点（后插）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p, DNode *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>)<span class="comment">//非法参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)<span class="comment">//如果p结点有后继结点</span></span><br><span class="line">        p-&gt;next-&gt;prior = s;</span><br><span class="line">    s-&gt;prior -&gt; p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除p结点的后继结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q = p-&gt;next;<span class="comment">//找到p结点的后继结点q</span></span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//p没有后继</span></span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;next != <span class="literal">NULL</span>)<span class="comment">//q结点不是最后一个结点</span></span><br><span class="line">        q-&gt;next-&gt;prior = p;</span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestoryList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    <span class="comment">//循环释放各zhi xiang个数据结点</span></span><br><span class="line">    <span class="keyword">while</span> (L-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">DeleteNextDNode</span>(L);</span><br><span class="line">    <span class="built_in">free</span>(L);<span class="comment">//释放头结点</span></span><br><span class="line">    L = <span class="literal">NULL</span>;<span class="comment">//头指针指向NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后向遍历</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">//对结点p做相应处理</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前向遍历</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">//对结点p做相应处理</span></span><br><span class="line">    p = p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前向遍历（跳过头结点）</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;prior != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">//对结点p做相应处理</span></span><br><span class="line">    p = p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E5%8F%8C%E9%93%BE%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单链表的建立</title>
      <link>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B/</link>
      <guid>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B/</guid>
      <pubDate>Tue, 21 Feb 2023 07:36:53 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;单链表的建立&quot;&gt;&lt;a href=&quot;#单链表的建立&quot; class=&quot;headerlink&quot; title=&quot;单链表的建立&quot;&gt;&lt;/a&gt;单链表的建立&lt;/h2&gt;&lt;h3 id=&quot;尾插法&quot;&gt;&lt;a href=&quot;#尾插法&quot; class=&quot;headerlink&quot; title=&quot;尾插法</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h2><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将输出元素以单链表的形式存储</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;<span class="comment">//正向建立单链表</span></span><br><span class="line">    <span class="type">int</span> x;<span class="comment">//设ElemType为整型</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//建立头结点</span></span><br><span class="line">    LNode *s, *r = L;<span class="comment">//r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">9999</span>)&#123;</span><br><span class="line">        s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;<span class="comment">//r指向新的表尾结点</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;<span class="comment">//尾结点指针置空</span></span><br><span class="line">    <span class="keyword">return</span> L:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;<span class="comment">//逆向建立单链表</span></span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>; <span class="comment">//初始为空链表</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);<span class="comment">//输入结点的值</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">9999</span>)&#123;<span class="comment">//输入9999表示结束</span></span><br><span class="line">        s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//创建新结点</span></span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;<span class="comment">//将新结点插入表中，L为头指针</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：注意养成好习惯，将单链表初始化，都先把头指针指向NULL<code>L-&gt;next = NULL</code></p>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单链表的查找</title>
      <link>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <guid>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <pubDate>Tue, 21 Feb 2023 07:09:03 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;按位查找&quot;&gt;&lt;a href=&quot;#按位查找&quot; class=&quot;headerlink&quot; title=&quot;按位查找&quot;&gt;&lt;/a&gt;按位查找&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第 i 个元素（带头结点）</span></span><br><span class="line"><span class="function">LNode * <span class="title">GetElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p；<span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;<span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L;<span class="comment">//L指向头结点，头结点是第0各结点（不存数据）</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i)&#123;<span class="comment">//循环找到第 i 个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function">LNode * <span class="title">GetElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> L:</span><br><span class="line">    <span class="keyword">if</span>（i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找，找到数据域 == e 的结点</span></span><br><span class="line"><span class="function">LNode * <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span></span>&#123;</span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="comment">//从第1个结点开始查找数据域为e的结点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;<span class="comment">//找到后返回该结点指针，否则返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求表的长度"><a href="#求表的长度" class="headerlink" title="求表的长度"></a>求表的长度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求表的长度（带头结点）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;<span class="comment">//统计表长</span></span><br><span class="line">    LNode *p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS: 三种操作时间复杂度都是 O(n)</strong></p>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux云服务器远程登录失败</title>
      <link>https://5fener.github.io/2023/02/21/linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8D%E8%83%BD%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</link>
      <guid>https://5fener.github.io/2023/02/21/linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8D%E8%83%BD%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</guid>
      <pubDate>Tue, 21 Feb 2023 01:19:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;在通过 Linux ssh 远程登录华为云服务器时，出现报错&lt;strong&gt;WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>在通过 Linux ssh 远程登录华为云服务器时，出现报错<strong>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</strong></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><p>这是SSH 使用过程中最常见的错误“警告：远程主机标识已更改”</p></li><li><h4 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h4><ul><li>服务器误报：<code>known_hosts</code>当服务器的唯一指纹与首次连接时存储在文件中的指纹不匹配时，通常会出现警告：远程主机识别错误。此密钥更改的一个常见原因是因为更改了 root 密码或重建了 VPS 服务器</li><li>更可怕的猜测是中间人攻击，攻击者将使用持有相同 IP 的虚假 SSH 服务器设置在你的连接和服务器之间。然后他们会将你的流量转发到真正的 SSH 服务器，让你不知道他们正在监视和收集您所做的一切</li></ul></li></ul><h3 id="谨慎排除"><a href="#谨慎排除" class="headerlink" title="谨慎排除"></a>谨慎排除</h3><p>如果你近期做出了如下改变，那么就是服务器误报而非中间人攻击引起的警告</p><ul><li><p>更改了你的 VPS 密码或 SSH 密钥</p></li><li><p>重建你的服务器</p></li><li><p>为多个远程系统分配相同的 IP 地址</p></li><li><p>销毁了你的服务器，然后启动了一台恰好具有相同 IP 地址的新服务器</p></li><li><p>切换操作系统或重新安装</p></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在排除自己是中间人攻击的受害者后，只需删除文件中的现有条目即可再次连接到你的服务器<code>known_hosts</code>，有几种方法可以做到</p><ul><li><h4 id="使用文本编辑器"><a href="#使用文本编辑器" class="headerlink" title="使用文本编辑器"></a>使用文本编辑器</h4></li><li><p>你可以使用任何文本编辑器浏览到您的<code>known_hosts</code>位置并删除与你的服务器 IP 对应的行。该<code>known_hosts</code>文件可能存储在以下位置：</p><ul><li><strong>Windows：</strong> <code>%USERPROFILE%\\.ssh or %USERPROFILE%\\ssh</code></li><li><strong>Linux 和 macOS：</strong> <code>.ssh/known_hosts</code></li></ul></li><li><h4 id="在命令行中使用-ssh-keygen"><a href="#在命令行中使用-ssh-keygen" class="headerlink" title="在命令行中使用 ssh-keygen"></a>在命令行中使用 ssh-keygen</h4><p>修改<code>known_hosts</code>一种可能更快、更通用的方法是通过 ssh-keygen删除您的行。您可以使用以下命令快速删除无效密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R &quot;your.server.ip&quot;</span><br></pre></td></tr></table></figure><p>当您通过此方法删除指纹时，您的旧信息将存储在<code>known_hosts.old</code></p></li></ul><p>PS：使用任一方法后再次连接到你的服务器会将你服务器的新指纹存储在你已知的主机文件中（<code>known_hosts</code>)，就像您第一次连接时一样</p>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/">疑难杂症</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%9D%82%E7%97%87/">杂症</category>
      
      <category domain="https://5fener.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://5fener.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/">云服务器</category>
      
      
      <comments>https://5fener.github.io/2023/02/21/linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8D%E8%83%BD%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单链表的插入删除</title>
      <link>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4/</link>
      <guid>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4/</guid>
      <pubDate>Mon, 20 Feb 2023 14:42:36 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;按位序插入（带头结点）&quot;&gt;&lt;a href=&quot;#按位序插入（带头结点）&quot; class=&quot;headerlink&quot; title=&quot;按位序插入（带头结点）&quot;&gt;&lt;/a&gt;按位序插入（带头结点）&lt;/h3&gt;&lt;p&gt;ListInsert(&amp;amp;L, i, e)：插入操作，在表 L</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="按位序插入（带头结点）"><a href="#按位序插入（带头结点）" class="headerlink" title="按位序插入（带头结点）"></a>按位序插入（带头结点）</h3><p>ListInsert(&amp;L, i, e)：插入操作，在表 L 中的第 i 个位置插入指定元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在第 i 个位置插入元素e（带头结点）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInser</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;<span class="comment">//当前p指向的第几个结点</span></span><br><span class="line">    p = L；<span class="comment">//L指向头结点，头结点时第0各结点（不存数据）</span></span><br><span class="line">    <span class="keyword">while</span> (P != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按位序插入（不带头结点）"><a href="#按位序插入（不带头结点）" class="headerlink" title="按位序插入（不带头结点）"></a>按位序插入（不带头结点）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//插入第1个结点的操作与其他结点操作不同</span></span><br><span class="line">        LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L;</span><br><span class="line">        L = s;<span class="comment">//头指针指向新结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L;<span class="comment">//p指向第1个结点（注意：不是头结点）</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;<span class="comment">//循环找到第 i-1 个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插操作：在p结点之后插入元素 e</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p, ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s =(LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)<span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e;<span class="comment">//用结点s保存数据元素e</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前插操作：在p结点之前插入元素 e</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p, ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>)<span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//新结点s连到p之后</span></span><br><span class="line">    s-&gt;data = p-&gt;data;<span class="comment">//将p中数据元素复制到s中</span></span><br><span class="line">    p-&gt;data = e;<span class="comment">//p中元素覆盖为e</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前插操作：在p结点之前插入结点 s</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p, LNode *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> || s == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> fasle;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//s连到p之后</span></span><br><span class="line">    ElemType temp = p-&gt;data;<span class="comment">//交换数据域部分</span></span><br><span class="line">    p-&gt;data = s-&gt;data;</span><br><span class="line">    s-&gt;data = temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按位序删除（带头结点）"><a href="#按位序删除（带头结点）" class="headerlink" title="按位序删除（带头结点）"></a>按位序删除（带头结点）</h3><p>ListDelete(&amp;L, i, &amp;e) ：删除操作，删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L;<span class="comment">//p指向第1个结点（注意：不是头结点）</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;<span class="comment">//循环找到第 i-1 个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>)<span class="comment">//第i-1个结点之后已无其他结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;<span class="comment">//令q指向被删除的结点</span></span><br><span class="line">    e = q-&gt;data;<span class="comment">//用e返回元素的值</span></span><br><span class="line">    p-&gt;next = q-&gt;next;<span class="comment">//将*q结点从链中“断开”</span></span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//释放结点的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定结点 p</span></span><br><span class="line"><span class="comment">//结点 p 不能为最后一个结点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;<span class="comment">//令q指向*p的后继结点</span></span><br><span class="line">    p-&gt;data = p-&gt;next-&gt;data;<span class="comment">//和后继结点交换数据域</span></span><br><span class="line">    p-&gt;next = q-&gt;next;<span class="comment">//将*p结点从链中“断开”</span></span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//释放后继结点的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单链表的定义</title>
      <link>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <guid>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <pubDate>Mon, 20 Feb 2023 14:13:15 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;用“链式存储”（存储结构）实现了“线性结构”（逻辑结构）&lt;/li&gt;
&lt;li&gt;一个结点存储一个数据元素&lt;/li&gt;
&lt;li&gt;各结点间的先后关系用一个指针表示&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;单链表的定义&quot;&gt;&lt;a href=&quot;#单链表的定义&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li>用“链式存储”（存储结构）实现了“线性结构”（逻辑结构）</li><li>一个结点存储一个数据元素</li><li>各结点间的先后关系用一个指针表示</li></ul><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;<span class="comment">//定义单链表节点类型</span></span><br><span class="line">ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LNode</span> *next;<span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> LNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span> *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">typedef struct LNode&#123;//定义单链表结点类型</span></span><br><span class="line"><span class="comment">    ElemType data;//每个节点存放一个数据元素</span></span><br><span class="line"><span class="comment">struct LNode *next;//指针指向下一个节点</span></span><br><span class="line"><span class="comment">&#125;LNode, *LinkList;</span></span><br><span class="line"><span class="comment">***/</span></span><br></pre></td></tr></table></figure><ul><li><p>要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个节点</p></li><li><p>&#96;&#96;&#96;C++<br>LNode * L; &#x2F;&#x2F;声明一个指向单链表第一个节点的指针<br>LinkList L;&#x2F;&#x2F;声明一个指向单链表第一个节点的指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `LNode * GetElem(LinkList L, int i)`</span><br><span class="line"></span><br><span class="line">  - LNode 强调返回的是一个结点</span><br><span class="line">  - LinkList 强调这是一个单链表</span><br><span class="line"></span><br><span class="line">### 不带头结点的单链表</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">typedef struct LNode&#123;//定义单链表结点类型</span><br><span class="line">    ElemType data;//每个节点存放一个数据元素</span><br><span class="line">struct LNode *next;//指针指向下一个节点</span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line">//初始化一个空的单链表</span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line">L = NULL;//空表，暂时还没有任何结点</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">    LinkList L;//声明一个指向单链表的指针</span><br><span class="line">    //初始化一个空表</span><br><span class="line">    InitList(L);</span><br><span class="line">    //......后续代码......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断单链表是否为空</span><br><span class="line">bool Empty(LinkList L)&#123;</span><br><span class="line">    if(L == NULL)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line">/***或</span><br><span class="line">bool Empty(LinkList L)&#123;</span><br><span class="line">return (L == NULL);</span><br><span class="line">&#125;</span><br><span class="line">***/</span><br></pre></td></tr></table></figure></li></ul><h3 id="带头结点的单链表"><a href="#带头结点的单链表" class="headerlink" title="带头结点的单链表"></a>带头结点的单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个单链表(带头结点)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IniList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时还没有节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断单链表是否为空(带头结点)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next = <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/20/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>顺序表的查找</title>
      <link>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <guid>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <pubDate>Sun, 19 Feb 2023 09:35:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;按位查找&lt;/strong&gt;，获取表 L 中第 i 个位置的元素的值&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>按位查找</strong>，获取表 L 中第 i 个位置的元素的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">ElemType data[MaxSize];<span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList<span class="comment">//顺序表的类型定义（静态分配方式）</span></span><br><span class="line">    </span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按值查找</strong>，在表 L 中查找具有给定关键字值的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在顺序表L中查找第一个元素值等于e的元素，并返回其位序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;<span class="comment">//数则下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度</strong></p><ul><li>最好情况：目标元素在表头<ul><li>循环1次，最好时间复杂度 &#x3D; O(1)</li></ul></li><li>最坏情况：目标元素在表尾<ul><li>循环n次，最坏时间复杂度 &#x3D; O(n)</li></ul></li><li>平均情况：假设目标元素出现在任何一个位置的概率相同，都是1&#x2F;n<ul><li>平均循环次数 &#x3D; (n + 1)&#x2F;2</li><li>平均时间复杂度 &#x3D; O(n)</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
