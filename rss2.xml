<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>长安街</title>
    <link>https://5fener.github.io/</link>
    
    <atom:link href="https://5fener.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>举目见日，不见长安</description>
    <pubDate>Sun, 19 Feb 2023 13:10:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>顺序表的查找</title>
      <link>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <guid>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <pubDate>Sun, 19 Feb 2023 09:35:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;按位查找&lt;/strong&gt;，获取表 L 中第 i 个位置的元素的值&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>按位查找</strong>，获取表 L 中第 i 个位置的元素的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">ElemType data[MaxSize];<span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList<span class="comment">//顺序表的类型定义（静态分配方式）</span></span><br><span class="line">    </span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>按值查找</strong>，在表 L 中查找具有给定关键字值的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"><span class="type">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在顺序表L中查找第一个元素值等于e的元素，并返回其位序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line"><span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;<span class="comment">//数则下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度</strong></p><ul><li>最好情况：目标元素在表头<ul><li>循环1次，最好时间复杂度 &#x3D; O(1)</li></ul></li><li>最坏情况：目标元素在表尾<ul><li>循环n次，最坏时间复杂度 &#x3D; O(n)</li></ul></li><li>平均情况：假设目标元素出现在任何一个位置的概率相同，都是1&#x2F;n<ul><li>平均循环次数 &#x3D; (n + 1)&#x2F;2</li><li>平均时间复杂度 &#x3D; O(n)</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>顺序表的插入和删除</title>
      <link>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <guid>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <pubDate>Sun, 19 Feb 2023 09:35:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;顺序表的插入&quot;&gt;&lt;a href=&quot;#顺序表的插入&quot; class=&quot;headerlink&quot; title=&quot;顺序表的插入&quot;&gt;&lt;/a&gt;顺序表的插入&lt;/h2&gt;&lt;h3 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="顺序表的插入"><a href="#顺序表的插入" class="headerlink" title="顺序表的插入"></a>顺序表的插入</h2><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MaxSize];<span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = L.length; j &gt;= i; j--)<span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">L.data[j] = L.data[j<span class="number">-1</span>];</span><br><span class="line">L.data[i<span class="number">-1</span>] = e;<span class="comment">//在位置i处放入e</span></span><br><span class="line">L.length++;<span class="comment">//长度加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="built_in">ListInsert</span>(L, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更具有健壮性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= MaxSize)<span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = L.length; j &gt;= i; j--)<span class="comment">//将第i个元素及之后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j<span class="number">-1</span>];</span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;<span class="comment">//将位置i处放入e</span></span><br><span class="line">    L.length++;<span class="comment">//长度加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>最好情况：新元素插入到表尾，不需要移动元素<ul><li>i &#x3D; n + 1，循环 0 次；最好时间复杂度 &#x3D; O(1)</li></ul></li><li>最坏情况：新元素插入到表头，需要将原有的 n 个元素全部向后移动<ul><li>i &#x3D; 1, 循环 n 次；最坏时间复杂度 &#x3D; O(n)</li></ul></li><li>平均情况：假设新元素插入到任何一个位置的概率相同<ul><li>i &#x3D; 1, 2, 3, …, length + 1的概率都是 p &#x3D; 1 &#x2F; (n+1)</li><li>平均循环次数 &#x3D; n &#x2F; 2  </li><li>平均时间复杂度 &#x3D; O(n)</li></ul></li></ul><h2 id="顺序表的删除"><a href="#顺序表的删除" class="headerlink" title="顺序表的删除"></a>顺序表的删除</h2><h3 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, <span class="type">int</span> &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i<span class="number">-1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= L.length; j++)<span class="comment">//将第i个位置后的元素前移</span></span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j];</span><br><span class="line">    L.length--;<span class="comment">//线性表长度减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="type">int</span> e = <span class="number">-1</span>; <span class="comment">//用变量e把删除的元素“带回来”</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">ListInsert</span>(L, <span class="number">3</span>, e))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;已删除第3个元素，删除元素值为%d\n&quot;</span>, e);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位序i不合法，删除失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li>最好情况：删除表尾元素，不需要移动其他元素<ul><li>i &#x3D; n， 循环 0 次，最好时间复杂度 &#x3D; O(1)</li></ul></li><li>最坏情况：删除表头元素，需要将后续的 n - 1个元素全都向前移动<ul><li>i &#x3D; 1, 循环 n - 1 次；最坏时间复杂度 &#x3D; O(n)</li></ul></li><li>平均情况：假设新元素插入到任何一个位置的概率相同<ul><li>i &#x3D; 1, 2, 3, …, length + 1的概率都是 p &#x3D; 1 &#x2F; n</li><li>平均循环次数 &#x3D; (n-1)&#x2F; 2</li><li>平均时间复杂度 &#x3D; O(n)</li></ul></li></ul><h2 id="代码要点"><a href="#代码要点" class="headerlink" title="代码要点"></a>代码要点</h2><ul><li>代码中注意位序 i 和数组下标的区别</li><li>算法要有健壮性，注意判断 i 的合法性</li><li>注意移动元素时是从靠前的元素开始还是从表尾元素开始</li><li>注意有的参数需要加“&amp;”引用</li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>顺序表的定义</title>
      <link>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <guid>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <pubDate>Sun, 19 Feb 2023 02:47:12 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;顺序表的定义&quot;&gt;&lt;a href=&quot;#顺序表的定义&quot; class=&quot;headerlink&quot; title=&quot;顺序表的定义&quot;&gt;&lt;/a&gt;顺序表的定义&lt;/h3&gt;&lt;h4 id=&quot;存储结构&quot;&gt;&lt;a href=&quot;#存储结构&quot; class=&quot;headerlink&quot; title=&quot;存</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h3><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>​逻辑上相邻的数据元素物理上也相邻</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>随机访问</strong>，即可以在 O(1) 时间内找到第 i 个元素</li><li>存储密度高，每个节点只存储数据元素</li><li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）</li><li>插入、删除操作不方便，需要移动大量元素</li></ul><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><h5 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h5><ul><li>使用”静态数组“实现</li><li>大小一旦确定就无法改变</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">ElemType data[MaxSize];<span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义（静态分配方式）</span></span><br></pre></td></tr></table></figure><ul><li>初始化一个顺序表</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10<span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MaxSize];<span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; MaxSixe; i++)</span><br><span class="line">L.data[i] = <span class="number">0</span>;<span class="comment">//将所有数据元素设置为默认初始值</span></span><br><span class="line">L.length = <span class="number">0</span>;<span class="comment">//顺序表长度为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h5><ul><li><p>使用”动态数组“实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"> ElemType *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"> <span class="type">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"> <span class="type">int</span> length;<span class="comment">//顺序表的类型定义（动态分配方式）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动态申请和释放内存空间</p><ul><li><p>C——malloc、free函数</p><ul><li><code>L.data = (ElemType*) malloc (sizeof (Elemtype) * InitSize);</code></li></ul></li><li><p>C++——new、delete关键字</p></li></ul></li><li><p>顺序表存满时，可再用malloc动态拓展顺序表的最大容量</p></li><li><p>需要将数据元素复制到新的存储区域，并用 free 函数释放原区域</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line"> <span class="type">int</span> *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"> <span class="type">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line"> <span class="type">int</span> length;<span class="comment">//顺序表的类型定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> SqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line"> <span class="built_in">InitList</span>(L);<span class="comment">//初始化顺序表</span></span><br><span class="line"> <span class="built_in">IncreaseSize</span>(L, <span class="number">5</span>);<span class="comment">//往顺序表中随便插入几个元素</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line"> <span class="comment">//用malloc函数申请一片连续的存储空间</span></span><br><span class="line"> L.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"> L.length = <span class="number">0</span>;</span><br><span class="line"> L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="type">void</span> IncreaseSize*SeqList &amp;L, <span class="type">int</span> len)&#123;</span><br><span class="line"> <span class="type">int</span> *p = L.data;</span><br><span class="line"> L.data = (<span class="type">int</span> *)<span class="built_in">malloc</span>((L.MaxSize + len) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)&#123;</span><br><span class="line">  L.data[i] = p[i];<span class="comment">//将数据复制到新区域</span></span><br><span class="line"> &#125;</span><br><span class="line"> L.MaxSize = L.MaxSize + len;<span class="comment">//顺序表最大长度增加len</span></span><br><span class="line"> <span class="built_in">free</span>(p);<span class="comment">//释放原来的内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/19/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://5fener.github.io/2023/02/19/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <guid>https://5fener.github.io/2023/02/19/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <pubDate>Sun, 19 Feb 2023 02:08:46 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线性表是具有&lt;strong&gt;相同&lt;/strong&gt;数据类型的 n(n&amp;gt;&amp;#x3D;0) 个&lt;strong&gt;数据元素&lt;/strong&gt;的&lt;strong&gt;有限序列&lt;/strong&gt;，其中 n 为&lt;strong&gt;表长&lt;/strong&gt;，当 n &amp;#x3D;</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><p>线性表是具有<strong>相同</strong>数据类型的 n(n&gt;&#x3D;0) 个<strong>数据元素</strong>的<strong>有限序列</strong>，其中 n 为<strong>表长</strong>，当 n &#x3D; 0 时线性表是一个<strong>空表</strong>。若用L命名线性表，则其一般表示为 L &#x3D; (a<sub>1</sub>， a<sub>2</sub>， … , a<sub>i</sub>， a<sub>i+1</sub>, …，a<sub>n</sub>)</p><ul><li><p>每个数据元素所占空间一样大</p></li><li><p>a<sub>i</sub> 是线性表中的”第 i 个“元素线性表中的位序</p></li><li><p>a<sub>1</sub>是表头元素； a<sub>n</sub>是表尾元素</p></li><li><p>除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继</p></li></ul></li><li><p>线性表的基本操作</p><ul><li>InistList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间</li><li>DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表 L 所占用的内存空间</li><li>ListInsert(&amp;L, i, e)：插入操作。在表 L 中的第 i 个位置上插入指定元素 e</li><li>ListDelete(&amp;L, i, &amp;e)：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值</li><li>LocateElem(L, e)：按值查找操作。在表 L 中查找具有给定关键字值的元素</li><li>GetElem(L, i): 按位查找操作。获取表 L 中第 i 个位置的元素的值</li></ul></li><li><p>其他常用操作</p><ul><li>Length(L)：求表长。返回线性表 L 的长度，即 L 中数据元素的个数</li><li>PrintList(L)：输出操作。按前后顺序输出线性表 L 的所有元素值</li><li>Empty(L)：判空操作。若 L 为空表，则返回 true，否则返回false</li></ul></li><li><p>什么时候传入参数的引用“&amp;”——对参数的修改结果需要“带回来”</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/19/%E7%BA%BF%E6%80%A7%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>算法的复杂度</title>
      <link>https://5fener.github.io/2023/02/18/%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <guid>https://5fener.github.io/2023/02/18/%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <pubDate>Sat, 18 Feb 2023 12:06:55 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;算法效率的度量&quot;&gt;&lt;a href=&quot;#算法效率的度量&quot; class=&quot;headerlink&quot; title=&quot;算法效率的度量&quot;&gt;&lt;/a&gt;算法效率的度量&lt;/h2&gt;&lt;h3 id=&quot;空间复杂度&quot;&gt;&lt;a href=&quot;#空间复杂度&quot; class=&quot;headerlink&quot; ti</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h2><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><ul><li><h4 id="问题计算"><a href="#问题计算" class="headerlink" title="问题计算"></a>问题计算</h4><ul><li>普通程序<ul><li>找到所占空间大小与问题规模相关的变量</li><li>分析所占空间 x 与问题规模 n 的关系 x &#x3D; f(n)</li><li>x 的数量级 O(x) 就是算法空间复杂度 S(n)</li></ul></li><li>递归程序<ul><li>找到递归调用的深度 x 与问题规模 n 的关系 x &#x3D; f(n)</li><li>x 的数量级 O(x) 就是算法空间复杂度 S(n)</li><li>有的算法各层函数所需存储空间不同，分析方法略有区别</li></ul></li></ul></li><li><h4 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h4><ul><li>加法规则： O(f(n)) + O(g(n)) &#x3D; O(max(f(n), g(n)))</li><li>乘法规则：O(f(n)) * O(g(n)) &#x3D; O(f(n) * g(n))</li><li>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</li></ul></li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li><p>事前预估算法时间开销 T(n) 与问题规模 n 的关系</p></li><li><p>顺序执行的代码只会影响常数项，可以忽略</p></li><li><p>只需挑循环中的一个基本操作分析它的执行次数与 n 的关系即可</p></li><li><p>如果有多层嵌套循环，只需关注最深层循环循环了几次</p></li><li><h4 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h4><ul><li>找到一个基本操作（最深层循环）</li><li>分析该基本操作的执行次数 x 与问题规模 n 的关系 x &#x3D; f(n)</li><li>x 的数量级 O(x) 就是算法时间复杂度 T(n)</li></ul></li><li><h4 id="常用技巧-1"><a href="#常用技巧-1" class="headerlink" title="常用技巧"></a>常用技巧</h4><ul><li>加法规则：O(f(n)) + O(g(n)) &#x3D; O(max(f(n), g(n)))</li><li>乘法规则：O(f(n)) * O(g(n)) &#x3D; O(f(n) * g(n))</li><li>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</li></ul></li><li><h4 id="三种复杂度"><a href="#三种复杂度" class="headerlink" title="三种复杂度"></a>三种复杂度</h4><ul><li>最坏时间复杂度：考虑输入数据“最坏”的情况</li><li>平均时间复杂度：考虑所有输入数据都等概率出现的情况</li><li>最好时间复杂度：考虑输入数据“最好”的情况</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/18/%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据结构的三要素</title>
      <link>https://5fener.github.io/2023/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%89%E8%A6%81%E7%B4%A0/</link>
      <guid>https://5fener.github.io/2023/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%89%E8%A6%81%E7%B4%A0/</guid>
      <pubDate>Fri, 17 Feb 2023 13:12:15 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;数据结构三要素&quot;&gt;&lt;a href=&quot;#数据结构三要素&quot; class=&quot;headerlink&quot; title=&quot;数据结构三要素&quot;&gt;&lt;/a&gt;数据结构三要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;逻辑结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集合结构&lt;/li&gt;
&lt;li&gt;线性结构——一对一</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><ul><li><p>逻辑结构</p><ul><li>集合结构</li><li>线性结构——一对一<ul><li>数据元素之间是一对一的关系</li><li>除了第一个元素，所有元素都有唯一前驱</li><li>除了最后一个元素，所有元素都有唯一后继</li></ul></li><li>树形结构——一对多</li><li>图状结构——多对多</li></ul></li><li><p>数据的运算</p><p>针对于某种逻辑结构，结合实际需求，定义基本运算</p><ul><li>基本运算<ul><li>查找第i个数据元素</li><li>在第i个位置插入新的数据元素</li><li>删除第i个位置的数据元素</li><li>……</li></ul></li></ul></li><li><p>物理结构（存储结构）</p><ul><li><p>顺序存储</p><ul><li>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</li></ul></li><li><p>非顺序存储（离散存储）</p><ul><li><p>链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系</p></li><li><p>索引存储：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址）</p></li><li><p>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储</p></li></ul></li><li><p>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个数据元素在物理上是离散的</p></li><li><p>数据的存储结构会影响存储空间分配的方便程度</p></li><li><p>数据的存储结构会影响对数据运算的速度</p></li></ul></li><li><p>运算的定义是针对逻辑结构的，指出运算的功能</p></li><li><p>运算的实现是针对存储结构的，指出运算的具体操作步骤</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%89%E8%A6%81%E7%B4%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基本概念和术语</title>
      <link>https://5fener.github.io/2023/02/17/ds%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/</link>
      <guid>https://5fener.github.io/2023/02/17/ds%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/</guid>
      <pubDate>Fri, 17 Feb 2023 12:37:45 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;早期的计算机只用于处理纯数值问题；现代计算机经常处理&lt;strong&gt;非数值型&lt;/strong&gt;问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据&lt;/strong&gt;：数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><p>早期的计算机只用于处理纯数值问题；现代计算机经常处理<strong>非数值型</strong>问题</p></li><li><p><strong>数据</strong>：数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料。</p></li><li><p><strong>数据元素</strong>描述的是一个个体</p><ul><li>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。</li><li>一个数据元素可由多个数据项来组成，数据项是构成 数据元素的不可分割的最小单位</li></ul></li><li><p><strong>数据对象</strong>是具有相同性质的数据元素的集合，是数据的一个子集</p></li><li><p><strong>数据结构</strong>指相互之间存在一定关系的数据元素的集合</p><ul><li><p>线性数据结构、网状数据结构（同一个数据对象里的数据元素，可以组成不同的数据结构）</p></li><li><p>同样的数据元素，可组成不同的数据结构；不同的数据结构，可组成相同的数据结构</p></li></ul></li><li><p><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称</p><ul><li>原子类型，其值不可再分的数据类型<ul><li>bool类型：<ul><li>值范围：true、false</li><li>可进行操作：与、或、非…</li></ul></li><li>int类型：<ul><li>值范围:-2147483648~2147483647</li><li>可进行操作：加、减、乘、除、模运算…</li></ul></li></ul></li><li>结构类型，其值可以再分解为若干成分（分量）的数据类型<ul><li>结构体</li></ul></li></ul></li><li><p><strong>抽象数据类型（ADT）</strong>是抽象数据组织及与之相关的操作</p><ul><li>定义一个ADT，就是在“定义”一种数据结构</li><li>确定了ADT的存储结构，才能”实现“这种数据结构</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="https://5fener.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="https://5fener.github.io/tags/%E8%80%83%E7%A0%94/">考研</category>
      
      <category domain="https://5fener.github.io/tags/%E7%8E%8B%E9%81%93/">王道</category>
      
      
      <comments>https://5fener.github.io/2023/02/17/ds%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++11标准</title>
      <link>https://5fener.github.io/2023/02/17/C++11/</link>
      <guid>https://5fener.github.io/2023/02/17/C++11/</guid>
      <pubDate>Fri, 17 Feb 2023 11:42:58 GMT</pubDate>
      
        
        
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化的方式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int  b(2);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int n = &amp;#123;(int)3.14&amp;#125;&lt;/code&gt;	新的写法不允许有精度的缺失&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指针置空&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<ol><li><p>初始化的方式</p><p><code>int  b(2);</code></p><p><code>int n = &#123;(int)3.14&#125;</code>新的写法不允许有精度的缺失</p></li><li><p>指针置空</p><p><code>int *p = NULL;</code></p><p><code>int *p = nullptr;</code></p></li><li><p>自动类型</p><p><code>int a = 0;</code></p><p><code>auto a = 0;</code>根据值匹配类型</p></li><li><p>decltype()</p><p><code>int a = 0;</code></p><p><code>decltype(a)b;</code>根据a的类型定义一个和a类型一致的b变量</p><p><code>decltype((a))m = a; </code>给a取别名m</p></li><li><p>新的for规则</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string str = &quot;abcdef&quot;;</span><br><span class="line">for(auto i; str)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法，只能用来遍历数组等容器。i所代表的是里面存的元素</p></li><li><p>给类型取别名</p><p><code>typedef int INT;</code></p><p><code>typedef void(*pFun) ();</code></p><p><code>using Int = int;</code></p><p><code>using PFUN = void(*) ();</code></p></li><li><p>default在类中的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class CA</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">CA();</span><br><span class="line">&#125;</span><br><span class="line">CA::CA() = default;//默认调用默认构造</span><br></pre></td></tr></table></figure></li><li><p>final</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class CA</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">virtual void fun()final&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/C/">C++</category>
      
      
      <category domain="https://5fener.github.io/tags/C/">C++</category>
      
      <category domain="https://5fener.github.io/tags/C-11/">C++11</category>
      
      
      <comments>https://5fener.github.io/2023/02/17/C++11/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>从C过渡到C++</title>
      <link>https://5fener.github.io/2023/02/17/C-%3EC++/</link>
      <guid>https://5fener.github.io/2023/02/17/C-%3EC++/</guid>
      <pubDate>Fri, 17 Feb 2023 02:59:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;C++新增&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法：类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装、继承、多态&lt;/li&gt;
&lt;li&gt;抽象、面向对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bool类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用来描述“真”或”假“&lt;/p&gt;
&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>C++新增</p><ul><li><p>语法：类</p><ul><li>封装、继承、多态</li><li>抽象、面向对象</li></ul></li><li><p>bool类型</p></li><li><p>用来描述“真”或”假“</p></li><li><p>取值范围： true， false</p></li><li><p>”非0为真“</p></li><li><p>内联函数：通过”内存膨胀“的方式，以空间换时间，提高程序运行速度</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/C/">C++</category>
      
      
      <category domain="https://5fener.github.io/tags/C/">C++</category>
      
      <category domain="https://5fener.github.io/tags/C-C/">C-&gt;C++</category>
      
      
      <comments>https://5fener.github.io/2023/02/17/C-%3EC++/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ERROR Deployer not found: baidu_url_submit</title>
      <link>https://5fener.github.io/2023/02/16/Hexo-d%20baitu-submit%E6%8A%A5%E9%94%99/</link>
      <guid>https://5fener.github.io/2023/02/16/Hexo-d%20baitu-submit%E6%8A%A5%E9%94%99/</guid>
      <pubDate>Thu, 16 Feb 2023 08:11:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;hexo-d的时候报错：ERROR-Deployer-not-found-baidu-url-submit&quot;&gt;&lt;a href=&quot;#hexo-d的时候报错：ERROR-Deployer-not-found-baidu-url-submit&quot; class=&quot;heade</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="hexo-d的时候报错：ERROR-Deployer-not-found-baidu-url-submit"><a href="#hexo-d的时候报错：ERROR-Deployer-not-found-baidu-url-submit" class="headerlink" title="hexo d的时候报错：ERROR Deployer not found: baidu_url_submit"></a>hexo d的时候报错：ERROR Deployer not found: baidu_url_submit</h1><ul><li>在配置Blog提交百度等搜索引擎收录完成后，输入hexo d出现报错<code>ERROR Deployer not found: baidu_url_submit</code>，此处在百度站长平台的链接<strong>主动推送</strong>设置时操作</li><li>其主动推送的实现原理如下：<ul><li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li></ul></li><li>问题发生在修改站点配置文件<code>_config.yml</code>时<ul><li><code>-type: baidu_url_submitter</code> 配置是 <code>baidu_url_submit</code> ，两者不一样</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://5fener.github.io/categories/Blog%E6%90%AD%E5%BB%BA/">Blog搭建</category>
      
      
      <category domain="https://5fener.github.io/tags/Blog/">Blog</category>
      
      <category domain="https://5fener.github.io/tags/%E6%9D%82%E7%97%87/">杂症</category>
      
      
      <comments>https://5fener.github.io/2023/02/16/Hexo-d%20baitu-submit%E6%8A%A5%E9%94%99/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
